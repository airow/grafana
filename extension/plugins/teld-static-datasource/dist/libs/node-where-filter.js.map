{"version":3,"sources":["../../src/libs/node-where-filter.js"],"names":["PathArray","Array","makePathArray","path","pathArray","index","length","split","name","segment","slice","dot","set","node","value","end","Object","get","exec","has","delete","arrayToObject","array","data","eq","search","module","exports","replace","TokenizerTree","forEach","operators","priority","operator","concat","TokenizerSubTree","tokenizer","content","start","words","match","char","push","type","nodeToExpr","left","right","escape","JSON","parse","Number","parseFloat","toString","SyntaxError","exprCompile","expr","RegExp","exprExecute","test","exprToSQL","expr2","makeTree","where","aliases","nodes","previous","next","sort","mon","sun","map","pop","whereSQL"],"mappings":"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","file":"node-where-filter.js","sourcesContent":["//var dot = require('./node-dot-path');\nclass PathArray extends Array { }\n\nconst makePathArray = function (path) {\n  if (path instanceof PathArray) {\n    return path;\n  } else if (path instanceof Array) {\n    const pathArray = new PathArray();\n    for (var index = 0; index < path.length; index++) {\n      pathArray[pathArray.length] = makePathArray(path[index]);\n    }\n    return pathArray;\n  } else if (typeof path === 'string') {\n    const pathArray = new PathArray();\n    path = path.split('.');\n    for (var index = 0, name = ''; index < path.length; index++) {\n      const segment = path[index];\n      if (segment[segment.length - 1] === '\\\\') {\n        name += segment.slice(0, -1) + '.';\n      } else {\n        name += segment;\n        pathArray[pathArray.length] = name;\n        name = '';\n      }\n    }\n    return pathArray;\n  } else {\n    return null;\n  }\n};\n\nvar dot = {\n  PathArray: PathArray,\n  makePathArray: makePathArray,\n\n  set: function (node, path, value) {\n    const pathArray = makePathArray(path);\n    if (pathArray) {\n      const end = pathArray.length - 1;\n      for (var index = 0; index < end; index++) {\n        const name = pathArray[index];\n        if (node[name] && node[name] instanceof Object) {\n          node = node[name];\n        } else {\n          node = node[name] = {};\n        }\n      }\n      node[pathArray[end]] = value;\n      return true;\n    } else {\n      return false;\n    }\n  },\n  get: function (node, path, exec) {\n    const pathArray = makePathArray(path);\n    if (pathArray) {\n      var index = 0;\n      if (exec === true) {\n        for (; index < pathArray.length && node; index++) {\n          const name = pathArray[index];\n          if (typeof node[name] === 'function') {\n            node = node[name]();\n          } else {\n            node = node[name];\n          }\n        }\n      } else {\n        for (; index < pathArray.length && node; index++) {\n          const name = pathArray[index];\n          node = node[name];\n        }\n      }\n      if (index === pathArray.length) {\n        return node;\n      }\n    }\n  },\n  has: function (node, path) {\n    const pathArray = makePathArray(path);\n    if (pathArray) {\n      const end = pathArray.length - 1;\n      for (var index = 0; index < end; index++) {\n        const name = pathArray[index];\n        if (node[name] && node[name] instanceof Object) {\n          node = node[name];\n        } else {\n          return false;\n        }\n      }\n      return pathArray[end] in node;\n    } else {\n      return false;\n    }\n  },\n  delete: function (node, path) {\n    const pathArray = makePathArray(path);\n    if (pathArray) {\n      const end = pathArray.length - 1;\n      for (var index = 0; index < end; index++) {\n        const name = pathArray[index];\n        if (node[name] && node[name] instanceof Object) {\n          node = node[name];\n        } else {\n          return;\n        }\n      }\n      delete node[pathArray[end]];\n    }\n  },\n\n  arrayToObject: function (array) {\n    const node = {};\n    for (var index = 0; index < array.length; index++) {\n      const data = array[index];\n      const eq = data.search(/[^\\\\]=/);\n      if (eq === -1) {\n        module.exports.set(node, data, true);\n      } else {\n        module.exports.set(node, data.slice(0, eq + 1).replace(/\\\\=/g, '='), data.slice(eq + 2));\n      }\n    }\n    return node;\n  },\n};\n\n\nconst TokenizerTree = {};\n[\n  ['||'],\n  ['&&'],\n  ['~', '!~', '=', '!=', '<', '>', '<=', '>='],\n].forEach((operators, priority) => {\n  operators.forEach((operator) => {\n    const pathArray = operator.split('');\n    dot.set(TokenizerTree, pathArray.concat(['type']), 'operator');\n    dot.set(TokenizerTree, pathArray.concat(['value']), operator);\n    dot.set(TokenizerTree, pathArray.concat(['priority']), priority);\n  });\n});\n['\"'].forEach((operator) => {\n  const pathArray = operator.split('');\n  const TokenizerSubTree = {};\n  dot.set(TokenizerSubTree, pathArray.concat(['type']), 'match-right');\n  dot.set(TokenizerSubTree, pathArray.concat(['value']), operator);\n  dot.set(TokenizerTree, pathArray.concat(['type']), 'match-left');\n  dot.set(TokenizerTree, pathArray.concat(['value']), operator);\n  dot.set(TokenizerTree, pathArray.concat(['end']), TokenizerSubTree);\n});\n[' ', '\\t', '\\n', '\\r', '(', ')'].forEach((operator) => {\n  const pathArray = operator.split('');\n  dot.set(TokenizerTree, pathArray.concat(['type']), 'delimit');\n  dot.set(TokenizerTree, pathArray.concat(['value']), operator);\n});\nconst tokenizer = function (content) {\n  var node = null;\n  var start = 0;\n  var words = [];\n  var match = null;\n  var priority = 0;\n  content = content + ' ';\n  for (var index = 0; index < content.length; index++) {\n    const char = content[index];\n    if (node === null) {\n      if (match) {\n        if (match[char] && content[index - 1] !== '\\\\') {\n          node = match[char];\n        }\n      } else if (TokenizerTree[char]) {\n        if (start !== index) {\n          words.push({\n            type: 'literal',\n            value: content.slice(start, index),\n            operator: '',\n          });\n        }\n        node = TokenizerTree[char];\n        start = index;\n      }\n    } else {\n      if (node[char]) {\n        node = node[char];\n      } else {\n        if (node.type) {\n          switch (node.type) {\n            case 'delimit':\n              if (node.value === '(') {\n                priority += 100;\n              } else if (node.value === ')') {\n                priority -= 100;\n              }\n              break;\n            case 'match-left':\n              match = node.end;\n              break;\n            case 'match-right':\n              words.push({\n                type: 'literal',\n                value: content.slice(start, index - node.value.length),\n                operator: node.value,\n              });\n              match = null;\n              break;\n            case 'operator':\n              words.push({\n                type: node.type,\n                operator: node.value,\n                priority: priority + node.priority,\n              });\n              break;\n          }\n          start = index--;\n        } else {\n          index--;\n        }\n        node = null;\n      }\n    }\n  }\n  return words;\n};\n\nconst nodeToExpr = function (node) {\n  switch (node.type) {\n    case 'expr':\n      return [node.operator, nodeToExpr(node.left), nodeToExpr(node.right)];\n    case 'literal':\n      if (node.operator === '\"') {\n        return node.value.replace(/(\\\\[bfnrt\\\\'\"]|\\\\u[0-f]{4})/ig, (escape) => JSON.parse('\"' + escape + '\"'));\n      } else if (Number.parseFloat(node.value).toString() == node.value) {\n        return Number.parseFloat(node.value);\n      } else {\n        return node.value;\n      }\n    default:\n      throw new SyntaxError();\n  }\n};\nconst exprCompile = function (expr) {\n  switch (expr[0]) {\n    case '&&': case '||':\n      return [expr[0], exprCompile(expr[1]), exprCompile(expr[2])];\n    case '~': case '!~':\n      if (expr[2] === \"%\") { expr[2] = \"(.*?)\"; }\n      return [expr[0], dot.makePathArray(expr[1]), new RegExp(expr[2])];\n    case '=': case '!=': case '<': case '>': case '<=': case '>=':\n      return [expr[0], dot.makePathArray(expr[1]), expr[2]];\n    case true:\n      return expr;\n  }\n};\nconst exprExecute = function (expr, data, exec) {\n  switch (expr[0]) {\n    case '&&':\n      return exprExecute(expr[1], data, exec) && exprExecute(expr[2], data, exec);\n    case '||':\n      return exprExecute(expr[1], data, exec) || exprExecute(expr[2], data, exec);\n    case '~':\n      return expr[2].test(dot.get(data, expr[1], exec));\n    case '!~':\n      return expr[2].test(dot.get(data, expr[1], exec)) === false;\n    case '=':\n      return dot.get(data, expr[1], exec) == expr[2];\n    case '!=':\n      return dot.get(data, expr[1], exec) != expr[2];\n    case '<':\n      return dot.get(data, expr[1], exec) < expr[2];\n    case '>':\n      return dot.get(data, expr[1], exec) > expr[2];\n    case '<=':\n      return dot.get(data, expr[1], exec) <= expr[2];\n    case '>=':\n      return dot.get(data, expr[1], exec) >= expr[2];\n    case true:\n      return true;\n  }\n};\nconst escape = function (value) {\n  if (typeof value === 'number') {\n    return value;\n  } else {\n    return '\"' + value.replace(/\"/g, '\\\\\"') + '\"';\n  }\n};\nconst exprToSQL = function (expr) {\n  var expr2 = expr[2];\n  switch (expr[0]) {\n    case '&&':\n      return '( ' + exprToSQL(expr[1]) + ' ) AND ( ' + exprToSQL(expr[2]) + ' )';\n    case '||':\n      return '( ' + exprToSQL(expr[1]) + ' ) OR ( ' + exprToSQL(expr[2]) + ' )';\n    case '~':\n      expr2 = expr[2];\n      if (expr2 === \"%\" || expr2 === \"(.*?)\") { expr2 = \"\"; }\n      return '`' + expr[1] + '` LIKE ' + escape('%' + expr2 + '%');\n    case '!~':\n      expr2 = expr[2];\n      if (expr2 === \"%\" || expr2 === \"(.*?)\") { expr2 = \"\"; }\n      return '`' + expr[1] + '` NOT LIKE ' + escape('%' + expr2 + '%');\n    case '=': case '!=': case '<': case '>': case '<=': case '>=':\n      return '`' + expr[1] + '` ' + expr[0] + ' ' + escape(expr[2]);\n    case true:\n      return '1 = 1';\n  }\n};\n\nexport default {\n  makeTree: function (where, aliases) {\n    typeof where !== 'string' && (where = '');\n    var nodes = tokenizer(where);\n    var priority = [];\n    nodes.forEach((node, index) => {\n      node.previous = nodes[index - 1] || null;\n      node.next = nodes[index + 1] || null;\n      node.type === 'operator' && priority.push(node);\n    });\n    priority.sort((mon, sun) => sun.priority - mon.priority);\n    aliases = aliases || {};\n    var node = priority.map((node) => {\n      switch (node.operator) {\n        case '&&': case '||':\n          if (node.previous && node.previous.type === 'expr' &&\n            node.next && node.next.type === 'expr') {\n            const expr = {\n              type: 'expr',\n              operator: node.operator,\n              left: node.previous,\n              right: node.next,\n              previous: node.previous.previous,\n              next: node.next.next,\n            };\n            expr.previous && (expr.previous.next = expr);\n            expr.next && (expr.next.previous = expr);\n            return expr;\n          }\n          break;\n        case '~': case '!~': case '=': case '!=': case '<': case '>': case '<=': case '>=':\n          if (node.previous && node.previous.type === 'literal' &&\n            node.next && node.next.type === 'literal') {\n            const expr = {\n              type: 'expr',\n              operator: node.operator,\n              left: node.previous,\n              right: node.next,\n              previous: node.previous.previous,\n              next: node.next.next,\n            };\n            expr.left.value = aliases[expr.left.value] || expr.left.value;\n            expr.previous && (expr.previous.next = expr);\n            expr.next && (expr.next.previous = expr);\n            return expr;\n          }\n          break;\n      }\n      throw new SyntaxError();\n    }).pop();\n    return node ? nodeToExpr(node) : [true];\n  },\n  where: function (where, exec) {\n    where = exprCompile(where);\n    return (data) => exprExecute(where, data, exec);\n  },\n  whereSQL: function (where) {\n    return exprToSQL(where);\n  },\n};\n"]}