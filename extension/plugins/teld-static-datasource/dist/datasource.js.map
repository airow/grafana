{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","wherefilter","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","options","target","first","targets","columns","map","rows","where","query","isEmpty","filterFun","item","filter","scopedExpressionVars","teldExpression2ScopedVarsFormCache","scopedVars","replaceScopedVars","Object","assign","replace","exprTree","makeTree","lastQueryMeta","whereSQL","console","log","data","col","row","transform","result","push","pull","datapoints","each","dataItem","ts","valueOf","when","status","message","title"],"mappings":";;;;;;;;;;;;;;;AAAOA,O;;AACAC,Y;;AACAC,iB;;;;;;;;;;;;;;;;;;;;;mCAEMC,iB;AAEX,mCAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACzD,eAAKC,IAAL,GAAYJ,iBAAiBI,IAA7B;AACA,eAAKC,GAAL,GAAWL,iBAAiBK,GAA5B;AACA,eAAKC,IAAL,GAAYN,iBAAiBM,IAA7B;AACA,eAAKC,CAAL,GAASN,EAAT;AACA,eAAKC,UAAL,GAAkBA,UAAlB;AACA,eAAKC,WAAL,GAAmBA,WAAnB;AACD;;;;gCAEKK,O,EAAS;AACb,gBAAIC,SAASb,EAAEc,KAAF,CAAQF,QAAQG,OAAhB,CAAb;AACA,gBAAIP,OAAOK,OAAOL,IAAlB;AACA,gBAAIQ,UAAUhB,EAAEiB,GAAF,CAAMJ,OAAOL,IAAP,EAAaQ,OAAnB,EAA4B,MAA5B,CAAd;AACA,gBAAIE,OAAOL,OAAOL,IAAP,EAAaU,IAAxB;;AAEA,gBAAIC,QAAQN,OAAOO,KAAP,IAAgB,EAA5B;AACA,gBAAI,UAAUpB,EAAEqB,OAAF,CAAUF,KAAV,CAAd,EAAgC;AAC9B,kBAAIG,YAAY,SAAZA,SAAY,CAAUC,IAAV,EAAgB;AAC9B,uBAAOA,KAAKf,IAAL,KAAc,gBAAd,IAAkC,UAAUe,KAAKC,MAAL,IAAe,IAAzB,CAAzC;AACD,eAFD;;AAIA,kBAAIC,uBAAuB,KAAKlB,WAAL,CAAiBmB,kCAAjB,CAAoD,SAApD,EAA+Dd,QAAQe,UAAvE,EAAmF,QAAnF,EAA6FL,SAA7F,CAA3B;AACAH,sBAAQ,KAAKZ,WAAL,CAAiBqB,iBAAjB,CAAmCT,KAAnC,EAA0CU,OAAOC,MAAP,CAAc,EAAd,EAAkBlB,QAAQe,UAA1B,EAAsCF,oBAAtC,CAA1C,CAAR;AACAN,sBAAQ,KAAKZ,WAAL,CAAiBwB,OAAjB,CAAyBZ,KAAzB,EAAgCU,OAAOC,MAAP,CAAc,EAAd,EAAkBlB,QAAQe,UAA1B,EAAsCF,oBAAtC,CAAhC,CAAR;AACA,kBAAIO,WAAW9B,YAAY+B,QAAZ,CAAqBd,KAArB,CAAf;AACAD,qBAAOA,KAAKM,MAAL,CAAYtB,YAAYiB,KAAZ,CAAkBa,QAAlB,CAAZ,CAAP;AACAnB,qBAAOqB,aAAP,GAAuB,EAAEd,OAAOlB,YAAYiC,QAAZ,CAAqBH,QAArB,CAAT,EAAvB;AACAI,sBAAQC,GAAR,CAAYnC,YAAYiC,QAAZ,CAAqBH,QAArB,CAAZ;AACD;AACD,gBAAIM,OAAO,CAAC;AACV,sBAAQ,OADE;AAEVtB,uBAAShB,EAAEiB,GAAF,CAAMD,OAAN,EAAe,UAAUuB,GAAV,EAAe;AAAE,uBAAO,EAAE,QAAQA,GAAV,EAAP;AAAyB,eAAzD,CAFC;AAGVrB,oBAAMlB,EAAEiB,GAAF,CAAMC,IAAN,EAAY,UAAUsB,GAAV,EAAe;AAC/B,uBAAOxC,EAAEyC,SAAF,CAAYzB,OAAZ,EAAqB,UAAU0B,MAAV,EAAkBH,GAAlB,EAAuB;AAAEG,yBAAOC,IAAP,CAAYH,IAAID,GAAJ,CAAZ;AAAwB,iBAAtE,EAAwE,EAAxE,CAAP;AACD,eAFK;AAHI,aAAD,CAAX;AAOA,gBAAI/B,SAAS,WAAb,EAA0B;AACxBR,gBAAE4C,IAAF,CAAO5B,OAAP,EAAgB,UAAhB;AACAsB,qBAAOtC,EAAEiB,GAAF,CAAMD,OAAN,EAAe,UAAUuB,GAAV,EAAe;AAAE,uBAAO,EAAE,UAAUA,GAAZ,EAAiBM,YAAY,EAA7B,EAAP;AAA2C,eAA3E,CAAP;AACA7C,gBAAE8C,IAAF,CAAO5B,IAAP,EAAa,UAAUsB,GAAV,EAAe;AAC1BxC,kBAAE8C,IAAF,CAAOR,IAAP,EAAa,UAAUS,QAAV,EAAoB;AAC/B,sBAAIC,KAAK/C,OAAOuC,IAAI,UAAJ,CAAP,EAAwBS,OAAxB,EAAT;AACAF,2BAASF,UAAT,CAAoBF,IAApB,CAAyB,CAACH,IAAIO,SAASlC,MAAb,CAAD,EAAuBmC,EAAvB,CAAzB;AACD,iBAHD;AAID,eALD;AAMD;AACD,mBAAO,KAAKrC,CAAL,CAAOuC,IAAP,CAAY,EAAEZ,MAAMA,IAAR,EAAZ,CAAP;AACD;;;2CAEgB;AACf,mBAAO,KAAK3B,CAAL,CAAOuC,IAAP,CAAY,EAAEC,QAAQ,SAAV,EAAqBC,SAAS,wBAA9B,EAAwDC,OAAO,SAA/D,EAAZ,CAAP;AACD","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\nimport moment from \"moment\";\r\nimport wherefilter from \"./libs/node-where-filter\";\r\n\r\nexport class GenericDatasource {\r\n\r\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n    this.type = instanceSettings.type;\r\n    this.url = instanceSettings.url;\r\n    this.name = instanceSettings.name;\r\n    this.q = $q;\r\n    this.backendSrv = backendSrv;\r\n    this.templateSrv = templateSrv;\r\n  }\r\n\r\n  query(options) {\r\n    var target = _.first(options.targets);\r\n    var type = target.type;\r\n    var columns = _.map(target[type].columns, 'name');\r\n    var rows = target[type].rows;\r\n\r\n    var where = target.query || \"\";\r\n    if (false === _.isEmpty(where)) {\r\n      var filterFun = function (item) {\r\n        return item.type === 'teldExpression' && \"es\" === (item.filter || \"es\");\r\n      };\r\n\r\n      var scopedExpressionVars = this.templateSrv.teldExpression2ScopedVarsFormCache('Tstatic', options.scopedVars, 'lucene', filterFun);\r\n      where = this.templateSrv.replaceScopedVars(where, Object.assign({}, options.scopedVars, scopedExpressionVars));\r\n      where = this.templateSrv.replace(where, Object.assign({}, options.scopedVars, scopedExpressionVars));\r\n      var exprTree = wherefilter.makeTree(where);\r\n      rows = rows.filter(wherefilter.where(exprTree));\r\n      target.lastQueryMeta = { query: wherefilter.whereSQL(exprTree) };\r\n      console.log(wherefilter.whereSQL(exprTree));\r\n    }\r\n    var data = [{\r\n      \"type\": \"table\",\r\n      columns: _.map(columns, function (col) { return { \"text\": col }; }),\r\n      rows: _.map(rows, function (row) {\r\n        return _.transform(columns, function (result, col) { result.push(row[col]); }, []);\r\n      }),\r\n    }];\r\n    if (type === \"timeserie\") {\r\n      _.pull(columns, 'time_sec');\r\n      data = _.map(columns, function (col) { return { \"target\": col, datapoints: [] }; });\r\n      _.each(rows, function (row) {\r\n        _.each(data, function (dataItem) {\r\n          var ts = moment(row['time_sec']).valueOf();\r\n          dataItem.datapoints.push([row[dataItem.target], ts]);\r\n        });\r\n      });\r\n    }\r\n    return this.q.when({ data: data });\r\n  }\r\n\r\n  testDatasource() {\r\n    return this.q.when({ status: \"success\", message: \"Data source is working\", title: \"Success\" });\r\n  }\r\n}\r\n"]}