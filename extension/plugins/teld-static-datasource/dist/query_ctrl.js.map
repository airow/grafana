{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","_","GenericDatasourceQueryCtrl","$scope","$injector","scope","target","type","panel","table","columns","rows","timeserie","getTarget","tsCol","name","undefined","find","unshift","push","size","variableArray","index","newIndex","move","variable","indexOf","splice","query","datasource","metricFindQuery","rawQuery","panelCtrl","refresh","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,e,kBAAAA,S;;AAEFC,O;;;;;;;;;;;;;;;;;;;;;4CAEMC,0B;;;AAEX,4CAAYC,MAAZ,EAAoBC,SAApB,EAA+B;AAAA;;AAAA,8JACvBD,MADuB,EACfC,SADe;;AAG7B,gBAAKC,KAAL,GAAaF,MAAb;AACA;AACA,gBAAKG,MAAL,CAAYC,IAAZ,GAAmB,MAAKD,MAAL,CAAYC,IAAZ,KAAqB,MAAKC,KAAL,CAAWD,IAAX,KAAoB,qBAApB,GAA4C,OAA5C,GAAsD,WAA3E,CAAnB;;AAEA,gBAAKD,MAAL,CAAYG,KAAZ,GAAoB,MAAKH,MAAL,CAAYG,KAAZ,IAAqB,EAAEC,SAAS,EAAX,EAAeC,MAAM,EAArB,EAAzC;AACA,gBAAKL,MAAL,CAAYM,SAAZ,GAAwB,MAAKN,MAAL,CAAYM,SAAZ,IAAyB,EAAEF,SAAS,EAAX,EAAeC,MAAM,EAArB,EAAjD;AAR6B;AAS9B;;;;sCAEW;AACV,mBAAO,KAAKL,MAAL,CAAY,KAAKA,MAAL,CAAYC,IAAxB,CAAP;AACD;;;qCAEUA,I,EAAM;AACf,gBAAID,SAAS,KAAKO,SAAL,EAAb;AACA,gBAAIH,UAAUJ,OAAOI,OAArB;AACA,gBAAI,KAAKJ,MAAL,CAAYC,IAAZ,KAAqB,WAAzB,EAAsC;AACpC,kBAAIO,QAAQ,EAAEC,MAAM,UAAR,EAAZ;AACA,kBAAIC,cAAcf,EAAEgB,IAAF,CAAOP,OAAP,EAAgBI,KAAhB,CAAlB,EAA0C;AACxCJ,wBAAQQ,OAAR,CAAgBJ,KAAhB;AACD;AACF;AACDJ,oBAAQS,IAAR,CAAa,EAAEJ,MAAM,EAAR,EAAYR,MAAMA,IAAlB,EAAb;AACA,gBAAIN,EAAEmB,IAAF,CAAOd,OAAOK,IAAd,MAAwB,CAA5B,EAA+B;AAC7BL,qBAAOK,IAAP,CAAYQ,IAAZ,CAAiB,EAAjB;AACD;AACF;;;+BAEIE,a,EAAeC,K,EAAOC,Q,EAAU;AACnCtB,cAAEuB,IAAF,CAAOH,aAAP,EAAsBC,KAAtB,EAA6BC,QAA7B;AACD;;;iCAEMF,a,EAAeI,Q,EAAU;AAC9B,gBAAIH,QAAQrB,EAAEyB,OAAF,CAAUL,aAAV,EAAyBI,QAAzB,CAAZ;AACAJ,0BAAcM,MAAd,CAAqBL,KAArB,EAA4B,CAA5B;AACD;;;mCAEQ,CAER;;;qCAEUM,K,EAAO;AAChB,mBAAO,KAAKC,UAAL,CAAgBC,eAAhB,CAAgCF,SAAS,EAAzC,CAAP;AACD;;;6CAEkB;AACjB,iBAAKtB,MAAL,CAAYyB,QAAZ,GAAuB,CAAC,KAAKzB,MAAL,CAAYyB,QAApC;AACD;;;6CAEkB;AACjB,iBAAKC,SAAL,CAAeC,OAAf,GADiB,CACS;AAC3B;;;;QAvD6CjC,S;;;;AA0DhDE,iCAA2BgC,WAA3B,GAAyC,4BAAzC","file":"query_ctrl.js","sourcesContent":["import { QueryCtrl } from 'app/plugins/sdk';\nimport './css/query-editor.css!';\nimport _ from 'lodash';\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    //this.target.target = this.target.target || 'select metric';\n    this.target.type = this.target.type || (this.panel.type === \"teld-querybar-panel\" ? 'table' : 'timeserie');\n\n    this.target.table = this.target.table || { columns: [], rows: [] };\n    this.target.timeserie = this.target.timeserie || { columns: [], rows: [] };\n  }\n\n  getTarget() {\n    return this.target[this.target.type];\n  }\n\n  addColumns(type) {\n    var target = this.getTarget();\n    var columns = target.columns;\n    if (this.target.type === 'timeserie') {\n      var tsCol = { name: \"time_sec\" };\n      if (undefined === _.find(columns, tsCol)) {\n        columns.unshift(tsCol);\n      }\n    }\n    columns.push({ name: \"\", type: type });\n    if (_.size(target.rows) === 0) {\n      target.rows.push({});\n    }\n  }\n\n  move(variableArray, index, newIndex) {\n    _.move(variableArray, index, newIndex);\n  }\n\n  remove(variableArray, variable) {\n    var index = _.indexOf(variableArray, variable);\n    variableArray.splice(index, 1);\n  }\n\n  addRow() {\n\n  }\n\n  getOptions(query) {\n    return this.datasource.metricFindQuery(query || '');\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  onChangeInternal() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n\n"]}